2018年8月11日23:29:07
1) hash set 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_set<ListNode*> visited;
        while(head){
            if (visited.count(head)){
                return true;
            }
            else
            {
                visited.insert(head);
            }
            head = head->next; 
        }
        return false; 
    }
};

2) slow, fast pointers. Classical trick in linked list 
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        auto fast = head; 
        auto slow = head; 
        while (fast){
            if (fast->next == NULL) return false;
            fast = fast->next->next;
            slow = slow->next; 
            if (fast == slow) 
                return true; 
        }
        return false; 
    }
};
