2018年8月18日23:11:38

方法1
建立从root 到 两个节点的path vector，然后从两个path vector中找到最后一个一样的点。
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*> pathP;
        vector<TreeNode*> pathQ;
        if (root == NULL){
            return NULL;
        }
        TreeNode* rootCopy = root; 
        pathP.push_back(root);
        pathQ.push_back(root);
        
        while (p->val != root->val){
            if (p->val > root->val){
                root = root->right;
            }
            else{
                root = root->left;
            }
            pathP.push_back(root);
        }
        while (q->val != rootCopy->val){
            if (q->val > rootCopy->val){
                rootCopy = rootCopy->right;
            }
            else{
                rootCopy = rootCopy->left;
            }
            pathQ.push_back(rootCopy);
        }
        int i;
        for(i = 0; i < min(pathQ.size(), pathP.size()); i++){
            if (pathP[i]->val != pathQ[i]->val){
                return pathP[i - 1];
            }
        }
        if (pathP[i - 1]->val == pathQ[i -1]->val){
            return pathP[i - 1];
        }
        
    }
};
方法2：分治。这里的分治不太明显，
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        //divide and conquer 
        if (!root || (root->val == p->val) || root->val == q->val){
            return root;//存在二义性，前提是两个节点都存在
        }
        TreeNode *left = lowestCommonAncestor(root->left, p, q);
        TreeNode *right = lowestCommonAncestor(root->right, p, q);
        
        if (left != NULL && right != NULL){
            return root;
        }
        if (left != NULL){
            return left;
        }
        if (right != NULL){
            return right;
        }
        return NULL;
    }
};
