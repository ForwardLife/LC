2018年8月12日11:50:34
经典DP问题，思路分状态，转移方程，初始化，结果
状态f[i]: 到第i个房子的最大值
转移方程：f[i] = max(f[i - 1], f[i - 2] + nums[i])。状态方程根据题意得出
初始化: f[0] = nums[0], 
        f[1] = max(nums[0], nums[1])
结果：res = max(res, f[i])


class Solution {
public:
    int rob(vector<int>& nums) {
        int len = nums.size();
        if (len == 0)
            return 0;
        if (len == 1)
            return nums[0];
        vector<int> f(len);//state
        f[0] = nums[0];
        f[1] = max(nums[1], nums[0]);//initial 
        int res = max(f[0], f[1]); 
        for (int i = 2; i < len; i++){
            f[i] = max(f[i - 1], f[i - 2] + nums[i]); // transition 
            res = max(res, f[i]);
        }
        return res; 
    }
};
优化空间 from O(n) -> O(1)
注意迭代顺序，先前，后后
            a = b; 
            b = c;
            
class Solution {
public:
    int rob(vector<int>& nums) {
        int len = nums.size();
        if (len == 0)
            return 0;
        if (len == 1)
            return nums[0];
        //vector<int> f(len);//state
        //f[0] = nums[0];
        int a = nums[0];
        //f[1] = max(nums[1], nums[0]);//initial 
        int b = max(nums[1], nums[0]);
        int res = max(a, b); 
        for (int i = 2; i < len; i++){
            //f[i] = max(f[i - 1], f[i - 2] + nums[i]); // transition 
            int c = max(b, a + nums[i]);
            res = max(res, c);
            a = b; 
            b = c;
        }
        return res; 
    }
};
